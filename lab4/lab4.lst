     1                                  section .data 
     2 00000000 496E70757420617272-      InMsg db "Input array (28 elements)", 10 
     2 00000009 61792028323820656C-
     2 00000012 656D656E7473290A   
     3                                   lenInM equ $-InMsg 
     4 0000001A 46696E616C20617272-      OutMsg db "Final array:", 10 
     4 00000023 61793A0A           
     5                                   lenOutM equ $-OutMsg 
     6 00000027 507265737320456E74-      ExitMsg db "Press Enter to exit!" 
     6 00000030 657220746F20657869-
     6 00000039 7421               
     7                                   lenExit equ $-ExitMsg 
     8 0000003B 0A                       EnterMsg db 0xa 
     9                                  section .bss 
    10 00000000 <res 0000000A>           InBuf resb 10 
    11                                   lenInB equ $-InBuf 
    12 0000000A <res 0000000A>           OutBuf resb 10 
    13                                   lenOutB equ $-OutBuf 
    14 00000014 <res 00000070>           M resd 28
    15 00000084 <res 00000070>           N resd 28
    16                                  section .text 
    17                                   %include "./lib.asm" 
     1                              <1>          section .text     ; ������� ����
     2                              <1> IntToStr64:
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    17 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    18 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    20 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    21                              <1>                        ; ���������� �������
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    49 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    50 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    53 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    54 0000006D 38F8                <1>          cmp    al, bh  
    55 0000006F 772B                <1>          ja     .Error 
    56 00000071 2C30                <1>          sub    al, 30h
    57 00000073 6698                <1>          cbw           
    58 00000075 6650                <1>          push   ax     
    59 00000077 66B80A00            <1>          mov    ax, 10 
    60 0000007B 66F7E7              <1>          mul    di     
    61 0000007E 665F                <1>          pop    di     
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax       
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
    18                                   global _start  
    19                                  _start: 
    20 000000A9 B801000000               mov rax, 1 
    21 000000AE BF01000000               mov rdi, 1 
    22 000000B3 48BE-                    mov rsi, InMsg 
    22 000000B5 [0000000000000000] 
    23 000000BD BA1A000000               mov rdx, lenInM 
    24 000000C2 0F05                     syscall 
    25                                    
    26 000000C4 B91C000000               mov rcx, 28
    27 000000C9 BB00000000               mov rbx, 0 
    28                                    
    29                                  cycleIn: 
    30 000000CE 51                       push rcx 
    31 000000CF 53                       push rbx 
    32                                    
    33 000000D0 B800000000               mov rax, 0 
    34 000000D5 BF00000000               mov rdi, 0 
    35 000000DA 48BE-                    mov rsi, InBuf 
    35 000000DC [0000000000000000] 
    36 000000E4 BA0A000000               mov rdx, lenInB 
    37 000000E9 0F05                     syscall 
    38                                    
    39 000000EB E862FFFFFF               call StrToInt64 
    40 000000F0 4883FB00                 cmp rbx, 0 
    41 000000F4 75A6                     jne StrToInt64.Error 
    42                                  
    43 000000F6 5B                       pop rbx
    44 000000F7 89049D[14000000]         mov[M+rbx*4], eax 
    45 000000FE 48FFC3                   inc rbx 
    46 00000101 59                       pop rcx 
    47 00000102 E2CA                    loop cycleIn 
    48                                  
    49                                  
    50 00000104 B903000000               mov rcx, 3
    51 00000109 4831D2                   xor rdx, rdx ; for N array
    52                                  cycleTypes: 
    53 0000010C 4883F902                 cmp rcx, 2
    54 00000110 51                       push rcx
    55 00000111 7F04                     jg negative
    56 00000113 7429                     je positive
    57 00000115 7C4E                     jl zeros
    58                                  negative:
    59 00000117 B91C000000               mov rcx, 28
    60 0000011C 31C0                     xor eax, eax
    61 0000011E 4831DB                   xor rbx, rbx
    62                                  cycle1: 
    63 00000121 8B049D[14000000]         mov eax, [M+rbx*4]
    64 00000128 48FFC3                   inc rbx
    65 0000012B 83F800                   cmp eax, 0
    66 0000012E 7D0A                     jnl skip1
    67 00000130 890495[84000000]         mov [N+rdx*4], eax
    68 00000137 48FFC2                   inc rdx
    69                                  skip1: 
    70 0000013A E2E5                    loop cycle1
    71 0000013C EB4E                     jmp continueCycleTypes 
    72                                  positive: 
    73 0000013E B91C000000               mov rcx, 28
    74 00000143 31C0                     xor eax, eax
    75 00000145 4831DB                   xor rbx, rbx
    76                                  cycle2: 
    77 00000148 8B049D[14000000]         mov eax, [M+rbx*4]
    78 0000014F 48FFC3                   inc rbx
    79 00000152 83F800                   cmp eax, 0
    80 00000155 7E0A                     jng skip2
    81 00000157 890495[84000000]         mov [N+rdx*4], eax
    82 0000015E 48FFC2                   inc rdx
    83                                  skip2: 
    84 00000161 E2E5                    loop cycle2
    85 00000163 EB27                     jmp continueCycleTypes 
    86                                  zeros: 
    87 00000165 B91C000000               mov rcx, 28
    88 0000016A 31C0                     xor eax, eax
    89 0000016C 4831DB                   xor rbx, rbx
    90                                  cycle3: 
    91 0000016F 8B049D[14000000]         mov eax, [M+rbx*4]
    92 00000176 48FFC3                   inc rbx
    93 00000179 83F800                   cmp eax, 0
    94 0000017C 750A                     jne skip3
    95 0000017E 890495[84000000]         mov [N+rdx*4], eax
    96 00000185 48FFC2                   inc rdx
    97                                  skip3: 
    98 00000188 E2E5                    loop cycle3
    99 0000018A EB00                     jmp continueCycleTypes 
   100                                  continueCycleTypes: 
   101 0000018C 59                       pop rcx
   102 0000018D 48FFC9                   dec rcx
   103 00000190 0F8576FFFFFF            jnz cycleTypes
   104                                   
   105 00000196 B91C000000               mov rcx, 28
   106 0000019B 4831DB                   xor rbx, rbx 
   107                                  cycleOut1: 
   108 0000019E 8B049D[84000000]         mov eax, [N+rbx*4] 
   109 000001A5 48FFC3                   inc rbx 
   110 000001A8 53                       push rbx 
   111 000001A9 51                       push rcx 
   112                                  
   113 000001AA 48BE-                    mov rsi, OutBuf 
   113 000001AC [0A00000000000000] 
   114 000001B4 E847FEFFFF               call IntToStr64 
   115 000001B9 BF01000000               mov rdi, 1 
   116 000001BE 4889C2                   mov rdx, rax 
   117 000001C1 B801000000               mov rax, 1 
   118 000001C6 0F05                     syscall 
   119                                  
   120 000001C8 59                       pop rcx 
   121 000001C9 5B                       pop rbx 
   122 000001CA E2D2                    loop cycleOut1 
   123                                   
   124 000001CC B801000000               mov rax, 1 
   125 000001D1 BF01000000               mov rdi, 1 
   126 000001D6 48BE-                    mov rsi, ExitMsg 
   126 000001D8 [2700000000000000] 
   127 000001E0 BA14000000               mov rdx, lenExit 
   128 000001E5 0F05                     syscall 
   129 000001E7 B800000000               mov rax, 0 
   130 000001EC BF00000000               mov rdi, 0 
   131 000001F1 48BE-                    mov rsi, InBuf 
   131 000001F3 [0000000000000000] 
   132 000001FB BA0A000000               mov rdx, lenInB 
   133 00000200 0F05                     syscall 
   134                                   
   135 00000202 B83C000000               mov rax, 60 
   136 00000207 4831FF                   xor rdi, rdi 
   137 0000020A 0F05                     syscall
