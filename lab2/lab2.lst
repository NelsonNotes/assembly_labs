     1                                  	section .data ; сегмент инициализированных переменных
     2 00000000 496E707574204D2076-     mMsg db "Input M value: "
     2 00000009 616C75653A20       
     3                                  len_m equ $-mMsg
     4 0000000F 496E70757420412076-     aMsg db "Input A value: "
     4 00000018 616C75653A20       
     5                                  len_a equ $-aMsg
     6 0000001E 623D20                  bMsg db "b= "
     7                                  len_b equ $-bMsg
     8 00000021 02                      D db 2
     9                                  	section .bss ;сегмент неинициализированных переменных
    10 00000000 <res 0000000A>          InBuf resb 10
    11                                  lenIn equ $-InBuf
    12 0000000A <res 00000014>          OutBuf resb 20
    13                                  lenOut equ $-OutBuf
    14 0000001E <res 00000002>          M resw 1
    15 00000020 <res 00000002>          A resw 1
    16 00000022 <res 00000002>          B resw 1
    17                                  	section .text ; сегмент кода b = (m - 5) * (m + 2) + m + a/2
    18                                  %include "./lib.asm"
     1                              <1>          section .text     ; ������� ����
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    17 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    18 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    20 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    21                              <1>                        ; ���������� �������
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    49 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    50 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    53 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    54 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    55 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    56 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    57 00000073 6698                <1>          cbw            ; ��������� �� �����
    58 00000075 6650                <1>          push   ax      ; ��������� � �����
    59 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    60 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    61 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
    19                                  
    20                                  global _start
    21                                  _start:
    22                                  
    23 000000A9 B801000000              mov RAX, 1
    24 000000AE BF01000000              mov RDI, 1
    25 000000B3 48BE-                   mov RSI, mMsg
    25 000000B5 [0000000000000000] 
    26 000000BD BA0F000000              mov RDX, len_m
    27 000000C2 0F05                    syscall
    28                                  
    29 000000C4 B800000000              mov RAX, 0
    30 000000C9 BF00000000              mov RDI, 0
    31 000000CE 48BE-                   mov RSI, InBuf
    31 000000D0 [0000000000000000] 
    32 000000D8 BA0A000000              mov RDX, lenIn
    33 000000DD 0F05                    syscall
    34                                  
    35 000000DF E86EFFFFFF              call StrToInt64
    36 000000E4 4883FB00                cmp RBX, 0
    37 000000E8 75B2                    jne StrToInt64.Error
    38 000000EA 48890425[1E000000]      mov [M], RAX
    39                                  
    40                                  
    41 000000F2 B801000000              mov RAX, 1
    42 000000F7 BF01000000              mov RDI, 1
    43 000000FC 48BE-                   mov RSI, aMsg
    43 000000FE [0F00000000000000] 
    44 00000106 BA0F000000              mov RDX, len_a
    45 0000010B 0F05                    syscall
    46                                  
    47 0000010D B800000000              mov RAX, 0
    48 00000112 BF00000000              mov RDI, 0
    49 00000117 48BE-                   mov RSI, InBuf
    49 00000119 [0000000000000000] 
    50 00000121 BA0A000000              mov RDX, lenIn
    51 00000126 0F05                    syscall
    52                                  
    53 00000128 E825FFFFFF              call StrToInt64
    54 0000012D 4883FB00                cmp RBX, 0
    55 00000131 0F8565FFFFFF            jne StrToInt64.Error
    56 00000137 48890425[20000000]      mov [A], RAX
    57                                  
    58 0000013F 668B0425[1E000000]      mov AX, [M]
    59 00000147 6683E805                sub AX, 5
    60 0000014B 668B1C25[1E000000]      mov BX, [M]
    61 00000153 6683C302                add BX, 2
    62 00000157 66F7EB                  imul BX
    63 0000015A 66890425[22000000]      mov [B], AX
    64 00000162 668B0425[20000000]      mov AX, [A]
    65 0000016A F63C25[21000000]        idiv byte [D]
    66 00000171 66030425[1E000000]      add AX, [M]
    67 00000179 66010425[22000000]      add [B], AX
    68                                  
    69 00000181 B801000000              mov RAX, 1
    70 00000186 BF01000000              mov RDI, 1
    71 0000018B 48BE-                   mov RSI, bMsg
    71 0000018D [1E00000000000000] 
    72 00000195 BA03000000              mov RDX, len_b
    73 0000019A 0F05                    syscall
    74 0000019C BE[0A000000]            mov esi, OutBuf
    75 000001A1 668B0425[22000000]      mov ax, [B]
    76 000001A9 98                      cwde
    77 000001AA E851FEFFFF              call IntToStr64 ;lenght in eax, start at [esi]
    78 000001AF BF01000000              mov RDI, 1
    79 000001B4 4889C2                  mov RDX, RAX
    80 000001B7 B801000000              mov RAX, 1
    81 000001BC 0F05                    syscall
    82                                  
    83 000001BE B83C000000              mov RAX, 60
    84 000001C3 4831FF                  xor RDI, RDI
    85 000001C6 0F05                    syscall
